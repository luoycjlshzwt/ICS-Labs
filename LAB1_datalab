/* 
 * CS:APP Data Lab 
 * 
 * <Please put your name and userid here>
 * 
 * bits.c - Source file with your solutions to the Lab.
 *          This is the file you will hand in to your instructor.
 *
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc
 * compiler. You can still use printf for debugging without including
 * <stdio.h>, although you might get a compiler warning. In general,
 * it's not good practice to ignore compiler warnings, but in this
 * case it's OK.  
 */

#if 0
/*
 * Instructions to Students:
 *
 * STEP 1: Read the following instructions carefully.
 */

You will provide your solution to the Data Lab by
editing the collection of functions in this source file.

INTEGER CODING RULES:
 
  Replace the "return" statement in each function with one
  or more lines of C code that implements the function. Your code 
  must conform to the following style:
 
  int Funct(arg1, arg2, ...) {
      /* brief description of how your implementation works */
      int var1 = Expr1;
      ...
      int varM = ExprM;

      varJ = ExprJ;
      ...
      varN = ExprN;
      return ExprR;
  }

  Each "Expr" is an expression using ONLY the following:
  1. Integer constants 0 through 255 (0xFF), inclusive. You are
      not allowed to use big constants such as 0xffffffff.
  2. Function arguments and local variables (no global variables).
  3. Unary integer operations ! ~
  4. Binary integer operations & ^ | + << >>
    
  Some of the problems restrict the set of allowed operators even further.
  Each "Expr" may consist of multiple operators. You are not restricted to
  one operator per line.

  You are expressly forbidden to:
  1. Use any control constructs such as if, do, while, for, switch, etc.
  2. Define or use any macros.
  3. Define any additional functions in this file.
  4. Call any functions.
  5. Use any other operations, such as &&, ||, -, or ?:
  6. Use any form of casting.
  7. Use any data type other than int.  This implies that you
     cannot use arrays, structs, or unions.

 
  You may assume that your machine:
  1. Uses 2s complement, 32-bit representations of integers.
  2. Performs right shifts arithmetically.
  3. Has unpredictable behavior when shifting an integer by more
     than the word size.

EXAMPLES OF ACCEPTABLE CODING STYLE:
  /*
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31
   */
  int pow2plus1(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     return (1 << x) + 1;
  }

  /*
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31
   */
  int pow2plus4(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     int result = (1 << x);
     result += 4;
     return result;
  }

FLOATING POINT CODING RULES

For the problems that require you to implent floating-point operations,
the coding rules are less strict.  You are allowed to use looping and
conditional control.  You are allowed to use both ints and unsigneds.
You can use arbitrary integer and unsigned constants.

You are expressly forbidden to:
  1. Define or use any macros.
  2. Define any additional functions in this file.
  3. Call any functions.
  4. Use any form of casting.
  5. Use any data type other than int or unsigned.  This means that you
     cannot use arrays, structs, or unions.
  6. Use any floating point data types, operations, or constants.


NOTES:
  1. Use the dlc (data lab checker) compiler (described in the handout) to 
     check the legality of your solutions.
  2. Each function has a maximum number of operators (! ~ & ^ | + << >>)
     that you are allowed to use for your implementation of the function. 
     The max operator count is checked by dlc. Note that '=' is not 
     counted; you may use as many of these as you want without penalty.
  3. Use the btest test harness to check your functions for correctness.
  4. Use the BDD checker to formally verify your functions
  5. The maximum number of ops for each function is given in the
     header comment for each function. If there are any inconsistencies 
     between the maximum ops in the writeup and in this file, consider
     this file the authoritative source.

/*
 * STEP 2: Modify the following functions according the coding rules.
 * 
 *   IMPORTANT. TO AVOID GRADING SURPRISES:
 *   1. Use the dlc compiler to check that your solutions conform
 *      to the coding rules.
 *   2. Use the BDD checker to formally verify that your solutions produce 
 *      the correct answers.
 */


#endif
/* Copyright (C) 1991-2012 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */
/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */
/* We do support the IEC 559 math functionality, real and complex.  */
/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
   Unicode 6.0.  */
/* We do not support C11 <threads.h>.  */
/* 
 * bitXor - x^y using only ~ and & 
 *   Example: bitXor(4, 5) = 1
 *   Legal ops: ~ &
 *   Max ops: 14
 *   Rating: 1
 */
int bitXor(int x, int y) {  // 1
    int ac1 = x & y, ac2 = (~x) & (~y);
    int ac = (~ac1) & (~ac2);
    return ac;
}
/* 
 * thirdBits - return word with every third bit (starting from the LSB) set to 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 8
 *   Rating: 1
 */
int thirdBits(void) {  // 2
    int ac = 0x49;
    ac = ac + (ac << 9);
    ac = ac + (ac << 18);
    return ac;
}
/* 
 * fitsShort - return 1 if x can be represented as a 
 *   16-bit, two's complement integer.
 *   Examples: fitsShort(33000) = 0, fitsShort(-32768) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 8
 *   Rating: 1
 */
int fitsShort(int x) {  // 3
    int ac = x >> 15;
    ac = !(ac ^ (x >> 31));//前17位和符号位相异或，看是否能截取15位+符号位1位
    return ac;
}
/*
 * isTmax - returns 1 if x is the maximum, two's complement number,
 *     and 0 otherwise 
 *   Legal ops: ! ~ & ^ | +
 *   Max ops: 10
 *   Rating: 1
 */
int isTmax(int x) {  // 4
    int ac = ~x, ac1 = !ac;//最大为0x7fffffff，取反后得到最小0x80000000，注意到两个相加得0为特殊性质，再排除-1的情况
    return !(ac + ac) ^ ac1;
}
/* 
 * fitsBits - return 1 if x can be represented as an 
 *  n-bit, two's complement integer.
 *   1 <= n <= 32
 *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 2
 */
int fitsBits(int x, int n) { // 5
    int ac = x >> (n + 31);//和前面的16-bit方法类似，这里右移n-1再对比
    ac = !(ac ^ (x >> 31));
    return ac;
}
/* 
 * upperBits - pads n upper bits with 1's
 *  You may assume 0 <= n <= 32
 *  Example: upperBits(4) = 0xF0000000
 *  Legal ops: ! ~ & ^ | + << >>
 *  Max ops: 10
 *  Rating: 1
 */
int upperBits(int n) { // 6
    int ac = (!(!n)) << 31;//n为0则得到0x0，非0则得到0x80000000
    ac = ac >> (n + 31);//右移n-1位，做算术移位
    return ac;
}
/* 
 * anyOddBit - return 1 if any odd-numbered bit in word set to 1
 *   Examples anyOddBit(0x5) = 0, anyOddBit(0x7) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 2
 */
int anyOddBit(int x) { // 7
    int ac = 0xAA;//为0x10101010
    ac = (ac << 8) + ac;
    ac = (ac << 16) + ac;
    return !!(ac & x);
}
/* 
 * byteSwap - swaps the nth byte and the mth byte
 *  Examples: byteSwap(0x12345678, 1, 3) = 0x56341278
 *            byteSwap(0xDEADBEEF, 0, 2) = 0xDEEFBEAD
 *  You may assume that 0 <= n <= 3, 0 <= m <= 3
 *  Legal ops: ! ~ & ^ | + << >>
 *  Max ops: 25
 *  Rating: 2
 */
int byteSwap(int x, int n, int m) {  // 8
    n = n << 3;// 乘以8，对应8位
    m = m << 3;
    int ac = (0xFF) & ((x >> n) ^ (x >> m));//这里运用到了a^b^a=b的性质，很巧妙
    x = x ^ (ac << m);
    x = x ^ (ac << n);
    return x;
}
/* 
 * absVal - absolute value of x
 *   Example: absVal(-1) = 1.
 *   You may assume -TMax <= x <= TMax
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 10
 *   Rating: 4
 */
int absVal(int x) {  // 9
    int ac = x >> 31;//得到符号位
    x = ac ^ (x + ac);//若为正，ac为0，x不变；若为负，ac为0xffffffff，-1，作用等价于~(x-1)，得到相反数
    return x;
}
/* 
 * divpwr2 - Compute x/(2^n), for 0 <= n <= 30
 *  Round toward zero
 *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 2
 */
int divpwr2(int x, int n) {  // 10
    int ac1 = x >> 31;//得到符号位
    int ac = (ac1 << n) ^ ac1;
    ac= (ac + x) >> n;//让x加上一个偏移量，如果是正数则为0，如果是负数则为(1<<n)-1，再进行除法（这是用计算器试出来的）
    return ac;
}
/* 
 * float_neg - Return bit-level equivalent of expression -f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representations of
 *   single-precision floating point values.
 *   When argument is NaN, return argument.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 10
 *   Rating: 2
 */
unsigned float_neg(unsigned uf) {//11
    unsigned ac1=uf&0x7fffffff,ac=uf^0x80000000;//因为没有什么限制所以直接取0x7fffffff，0x80000000，0x7f800000
    if(ac1>0x7f800000)
        ac=uf;
    return ac;//要得到-f则符号位取反，先与0x7fffffff使符号位为0，（为正）与无穷大作比较，若不大于则与0x80000000异或
}
/* 
 * logicalNeg - implement the ! operator, using all of 
 *              the legal operators except !
 *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1
 *   Legal ops: ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 4 
 */
int logicalNeg(int x) {  // 12
    int ac = x | (~x + 1);//要使0得到1，非0得到0，这一步是利用只有0取反得-1，再+1或0还是得0的性质，其他数的符号位都会变成1
    ac = (ac >> 31) + 1;
    return ac;
}
/* 
 * bitMask - Generate a mask consisting of all 1's 
 *   lowbit and highbit
 *   Examples: bitMask(5,3) = 0x38
 *   Assume 0 <= lowbit <= 31, and 0 <= highbit <= 31
 *   If lowbit > highbit, then mask should be all 0's
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 16
 *   Rating: 3
 */
int bitMask(int highbit, int lowbit) {  // 13
    int ac = (~0);//得到-1，每一位都是1
    int ac1=ac << lowbit,ac2=ac << highbit;//因为是算数移位，所以向左移，后面补零
    ac = (ac1 ^ (ac2 << 1)) & ac1;//两个结果异或可以截取相应的一段数全为1，再与ac1，如果low大于high则得0
    return ac;
}
/* 
 * isGreater - if x > y  then return 1, else return 0 
 *   Example: isGreater(4,5) = 0, isGreater(5,4) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 24
 *   Rating: 3
 */
int isGreater(int x, int y) {//14
    int ac1=x^y,ac2=x+(~y);//考虑溢出发生在正+正=负和负+负=正的情况，ac1判断x和y是否异号或相等，ac2是x-y
    int ac=(((y&ac1)+(~(ac1|ac2)))>>31)&0x1;//这一步只是为了得到符号位，所以不用管后面的数，这里根据结果进行了简化，所以并不是严格的逻辑
    return ac;
}
/* 
 * logicalShift - shift x to the right by n, using a logical shift
 *   Can assume that 0 <= n <= 31
 *   Examples: logicalShift(0x87654321,4) = 0x08765432
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3 
 */
int logicalShift(int x, int n) {  // 15
    int ac = (0x1 << 31);//要进行逻辑移位，如果符号位为0则不变，若为1则需要使它成0
    ac = ~((ac >> n)<<1);//这里需要先右移n再左移1，不能直接移n+31，因为有n=0的情况不适用，取反后与x右移n，则可以将符号位以前都变成0
    ac=(x>>n)&ac;
    return ac;
}
/*
 * satMul2 - multiplies by 2, saturating to Tmin or Tmax if overflow
 *   Examples: satMul2(0x30000000) = 0x60000000
 *             satMul2(0x40000000) = 0x7FFFFFFF (saturate to TMax)
 *             satMul2(0x60000000) = 0x7FFFFFFF (saturate to TMin)
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3
 */
int satMul2(int x) {//16*
    int ac=x<<1,ac1=ac>>31,ac2=0x1<<31;//分别使x乘以2，取x和ac的符号位，再得到0x80000000，最小
    int ac3=ac^ac1^ac2;//利用a^b^a=b，经过化简后可能不是严格的逻辑
    int ac4=(ac1^(x>>31));//判断是否发生overflow，若有则为-1，否则为0
    ac=ac^(ac3&ac4);
    return ac;
}
/* 
 * subOK - Determine if can compute x-y without overflow
 *   Example: subOK(0x80000000,0x80000000) = 1,
 *            subOK(0x80000000,0x70000000) = 0, 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3
 */
int subOK(int x, int y) {  // 17
    int ac = x ^ (x + (~y) + 1);//这里是让x-y和x异或，主要是看符号位是否相同
    ac = (x ^ y) & ac;//这里看x和y的符号位是否相同，再与ac，正+正得负和负加负得正时溢出
    ac=ac>>31;
    return !ac;//取符号位后取非
}
/*
 * trueThreeFourths - multiplies by 3/4 rounding toward 0,
 *   avoiding errors due to overflow
 *   Examples: trueThreeFourths(11) = 8
 *             trueThreeFourths(-9) = -6
 *             trueThreeFourths(1073741824) = 805306368 (no overflow)
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 4
 */
int trueThreeFourths(int x){//18
    int ac2=x>>2,ac1=ac2+ac2+ac2;//整数部分
    int ac=x&0x3,ac3=(x>>31)&0x3;//整数部分先除再加，小数部分先加再除
    ac=(ac+ac+ac+ac3)>>2;//这里计算小数部分，如果是负则需要加上偏移量
    return ac1+ac;
}
/*
 * isPower2 - returns 1 if x is a power of 2, and 0 otherwise
 *   Examples: isPower2(5) = 0, isPower2(8) = 1, isPower2(0) = 0
 *   Note that no negative number is a power of 2.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 4
 */
int isPower2(int x) {//19
    int ac1=x>>31;//取符号位
    int ac=x&(x+(~ac1));//这里运用了一个小技巧，如果x为正则变成x&(x-1)得0，而如果为负则不变，非0，判断是否满足只有1位为1的同时也排除了负数
    return !(ac|(!x));//这里排除了x=0的情况
}
/* 
 * float_i2f - Return bit-level equivalent of expression (float) x
 *   Result is returned as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point values.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned float_i2f(int x) {  // 20*
    if(x==0) 
        return 0;
    int ac1=(x>>31),ac2=0x80000000;
    if(ac1){//为负数
        x=-x;
        ac1=ac2;
    }
    unsigned ac3=x;
    int ac4=0;
    while((ac2&ac3)==0){//循环算出E
        ac3=ac3<<1;
        ac4=ac4+1;
    }
    int ac5=(158-ac4)<<23;//阶码
    ac3=ac3<<1;
    ac4=((ac3&0x1FF)>0x100)|((ac3&0x3FF)==0x300);//是否进位
    ac3=ac3>>9;//尾数
    unsigned ac=ac1+ac5+ac3+ac4;//符号位+阶码+位数+进位
    return ac;
}
/* howManyBits - return the minimum number of bits required to represent x in
 *             two's complement
 *  Examples: howManyBits(12) = 5
 *            howManyBits(298) = 10
 *            howManyBits(-5) = 4
 *            howManyBits(0)  = 1
 *            howManyBits(-1) = 1
 *            howManyBits(0x80000000) = 32
 *  Legal ops: ! ~ & ^ | + << >>
 *  Max ops: 90
 *  Rating: 4
 */
int howManyBits(int x) { // 21*
    int ac=(x<<1);
    ac=ac^x;
    int ac16=!!(ac>>16);//采用二分法，这个参考了网上的思路
    ac16=ac16<<4;
    ac=ac>>ac16;
    int ac8=!!(ac>>8);
    ac8=ac8<<3;
    ac=ac>>ac8;
    int ac4=!!(ac>>4);
    ac4=ac4<<2;
    ac=ac>>ac4;
    int ac2=!!(ac>>2);
    ac2=ac2<<1;
    ac=ac>>ac2;
    int ac1=!!(ac>>1);
    ac=1+ac1+ac2+ac4+ac8+ac16;
    return ac;
}
/* 
 * float_half - Return bit-level equivalent of expression 0.5*f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representation of
 *   single-precision floating point values.
 *   When argument is NaN, return argument
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned float_half(unsigned uf) {//22
    unsigned ac1=0x800000;
    unsigned ac2=uf&0x7f800000;
    if(ac2<=ac1){//阶码全0或者只有最后1位为1，就直接右移1位同时保留符号位（看是否需要进位）
        int ac3=uf&0x80000000;
        int ac5=((uf&0x3)==0x3);//进行舍入时看是否需要进位加1
        ac5=((uf^ac3)+ac5)>>1;
        return ac3|ac5;
    }
    else if(ac2==0x7f800000)//判断是否是nan，阶码全为1而尾数不是全0
        return uf;
    else//如果是规格化浮点数的形式，就直接阶码减1
        return uf-ac1;
}
